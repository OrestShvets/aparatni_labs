// -------------------------------------------------------------
// 
// File Name: hdlsrc\laba1\Subsystem_tb.v
// Created: 2022-10-25 21:42:04
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_tb;



  reg  i_CLK;
  reg  i_RST_N;
  wire i_CLK_EN;
  wire Out1_done;  // ufix1
  wire rdEnb;
  wire Out1_done_enb;  // ufix1
  reg [19:0] Out1_addr;  // ufix20
  wire Out1_active;  // ufix1
  reg [19:0] Data_Type_Conversion_out1_addr;  // ufix20
  wire [19:0] Data_Type_Conversion7_out1_addr_delay_1;  // ufix20
  reg  tb_enb_delay;
  reg signed [31:0] fp_i_X3;  // sfix32
  reg signed [7:0] rawData_i_X3;  // int8
  reg signed [31:0] status_i_X3;  // sfix32
  reg signed [7:0] holdData_i_X3;  // int8
  reg signed [7:0] i_X3_offset;  // int8
  wire signed [7:0] i_X3;  // int8
  wire [19:0] Data_Type_Conversion6_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_X2;  // sfix32
  reg signed [7:0] rawData_i_X2;  // int8
  reg signed [31:0] status_i_X2;  // sfix32
  reg signed [7:0] holdData_i_X2;  // int8
  reg signed [7:0] i_X2_offset;  // int8
  wire signed [7:0] i_X2;  // int8
  wire [19:0] Data_Type_Conversion5_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_X1;  // sfix32
  reg signed [7:0] rawData_i_X1;  // int8
  reg signed [31:0] status_i_X1;  // sfix32
  reg signed [7:0] holdData_i_X1;  // int8
  reg signed [7:0] i_X1_offset;  // int8
  wire signed [7:0] i_X1;  // int8
  wire [19:0] Data_Type_Conversion4_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_X0;  // sfix32
  reg signed [7:0] rawData_i_X0;  // int8
  reg signed [31:0] status_i_X0;  // sfix32
  reg signed [7:0] holdData_i_X0;  // int8
  reg signed [7:0] i_X0_offset;  // int8
  wire signed [7:0] i_X0;  // int8
  wire [19:0] Data_Type_Conversion3_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_W3;  // sfix32
  reg signed [7:0] rawData_i_W3;  // int8
  reg signed [31:0] status_i_W3;  // sfix32
  reg signed [7:0] holdData_i_W3;  // int8
  reg signed [7:0] i_W3_offset;  // int8
  wire signed [7:0] i_W3;  // int8
  wire [19:0] Data_Type_Conversion2_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_W2;  // sfix32
  reg signed [7:0] rawData_i_W2;  // int8
  reg signed [31:0] status_i_W2;  // sfix32
  reg signed [7:0] holdData_i_W2;  // int8
  reg signed [7:0] i_W2_offset;  // int8
  wire signed [7:0] i_W2;  // int8
  wire [19:0] Data_Type_Conversion1_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_W1;  // sfix32
  reg signed [7:0] rawData_i_W1;  // int8
  reg signed [31:0] status_i_W1;  // sfix32
  reg signed [7:0] holdData_i_W1;  // int8
  reg signed [7:0] i_W1_offset;  // int8
  wire signed [7:0] i_W1;  // int8
  wire Data_Type_Conversion_out1_active;  // ufix1
  wire Data_Type_Conversion_out1_enb;  // ufix1
  wire [19:0] Data_Type_Conversion_out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_i_W0;  // sfix32
  reg signed [7:0] rawData_i_W0;  // int8
  reg signed [31:0] status_i_W0;  // sfix32
  reg signed [7:0] holdData_i_W0;  // int8
  reg signed [7:0] i_W0_offset;  // int8
  wire signed [7:0] i_W0;  // int8
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire signed [15:0] Out1;  // int16
  wire Out1_enb;  // ufix1
  wire Out1_lastAddr;  // ufix1
  wire [19:0] Out1_addr_delay_1;  // ufix20
  reg signed [31:0] fp_Out1_expected;  // sfix32
  reg signed [15:0] Out1_expected;  // int16
  reg signed [31:0] status_Out1_expected;  // sfix32
  wire signed [15:0] Out1_ref;  // int16
  reg  Out1_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out1_done_enb = Out1_done & rdEnb;



  assign Out1_active = Out1_addr != 20'b11110100001001000000;



  assign #1 Data_Type_Conversion7_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_X3
  initial
    begin : i_X3_fileread
      fp_i_X3 = $fopen("i_X3.dat", "r");
      status_i_X3 = $rewind(fp_i_X3);
    end

  always @(Data_Type_Conversion7_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_X3 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_X3 = $fscanf(fp_i_X3, "%h", rawData_i_X3);
      end
    end

  // holdData reg for Data_Type_Conversion7_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion7_out1
      if (!i_RST_N) begin
        holdData_i_X3 <= 8'bx;
      end
      else begin
        holdData_i_X3 <= rawData_i_X3;
      end
    end

  always @(rawData_i_X3 or rdEnb)
    begin : stimuli_Data_Type_Conversion7_out1_1
      if (rdEnb == 1'b0) begin
        i_X3_offset <= holdData_i_X3;
      end
      else begin
        i_X3_offset <= rawData_i_X3;
      end
    end

  assign #2 i_X3 = i_X3_offset;

  assign #1 Data_Type_Conversion6_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_X2
  initial
    begin : i_X2_fileread
      fp_i_X2 = $fopen("i_X2.dat", "r");
      status_i_X2 = $rewind(fp_i_X2);
    end

  always @(Data_Type_Conversion6_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_X2 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_X2 = $fscanf(fp_i_X2, "%h", rawData_i_X2);
      end
    end

  // holdData reg for Data_Type_Conversion6_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion6_out1
      if (!i_RST_N) begin
        holdData_i_X2 <= 8'bx;
      end
      else begin
        holdData_i_X2 <= rawData_i_X2;
      end
    end

  always @(rawData_i_X2 or rdEnb)
    begin : stimuli_Data_Type_Conversion6_out1_1
      if (rdEnb == 1'b0) begin
        i_X2_offset <= holdData_i_X2;
      end
      else begin
        i_X2_offset <= rawData_i_X2;
      end
    end

  assign #2 i_X2 = i_X2_offset;

  assign #1 Data_Type_Conversion5_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_X1
  initial
    begin : i_X1_fileread
      fp_i_X1 = $fopen("i_X1.dat", "r");
      status_i_X1 = $rewind(fp_i_X1);
    end

  always @(Data_Type_Conversion5_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_X1 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_X1 = $fscanf(fp_i_X1, "%h", rawData_i_X1);
      end
    end

  // holdData reg for Data_Type_Conversion5_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion5_out1
      if (!i_RST_N) begin
        holdData_i_X1 <= 8'bx;
      end
      else begin
        holdData_i_X1 <= rawData_i_X1;
      end
    end

  always @(rawData_i_X1 or rdEnb)
    begin : stimuli_Data_Type_Conversion5_out1_1
      if (rdEnb == 1'b0) begin
        i_X1_offset <= holdData_i_X1;
      end
      else begin
        i_X1_offset <= rawData_i_X1;
      end
    end

  assign #2 i_X1 = i_X1_offset;

  assign #1 Data_Type_Conversion4_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_X0
  initial
    begin : i_X0_fileread
      fp_i_X0 = $fopen("i_X0.dat", "r");
      status_i_X0 = $rewind(fp_i_X0);
    end

  always @(Data_Type_Conversion4_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_X0 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_X0 = $fscanf(fp_i_X0, "%h", rawData_i_X0);
      end
    end

  // holdData reg for Data_Type_Conversion4_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion4_out1
      if (!i_RST_N) begin
        holdData_i_X0 <= 8'bx;
      end
      else begin
        holdData_i_X0 <= rawData_i_X0;
      end
    end

  always @(rawData_i_X0 or rdEnb)
    begin : stimuli_Data_Type_Conversion4_out1_1
      if (rdEnb == 1'b0) begin
        i_X0_offset <= holdData_i_X0;
      end
      else begin
        i_X0_offset <= rawData_i_X0;
      end
    end

  assign #2 i_X0 = i_X0_offset;

  assign #1 Data_Type_Conversion3_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_W3
  initial
    begin : i_W3_fileread
      fp_i_W3 = $fopen("i_W3.dat", "r");
      status_i_W3 = $rewind(fp_i_W3);
    end

  always @(Data_Type_Conversion3_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_W3 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_W3 = $fscanf(fp_i_W3, "%h", rawData_i_W3);
      end
    end

  // holdData reg for Data_Type_Conversion3_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion3_out1
      if (!i_RST_N) begin
        holdData_i_W3 <= 8'bx;
      end
      else begin
        holdData_i_W3 <= rawData_i_W3;
      end
    end

  always @(rawData_i_W3 or rdEnb)
    begin : stimuli_Data_Type_Conversion3_out1_1
      if (rdEnb == 1'b0) begin
        i_W3_offset <= holdData_i_W3;
      end
      else begin
        i_W3_offset <= rawData_i_W3;
      end
    end

  assign #2 i_W3 = i_W3_offset;

  assign #1 Data_Type_Conversion2_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_W2
  initial
    begin : i_W2_fileread
      fp_i_W2 = $fopen("i_W2.dat", "r");
      status_i_W2 = $rewind(fp_i_W2);
    end

  always @(Data_Type_Conversion2_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_W2 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_W2 = $fscanf(fp_i_W2, "%h", rawData_i_W2);
      end
    end

  // holdData reg for Data_Type_Conversion2_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion2_out1
      if (!i_RST_N) begin
        holdData_i_W2 <= 8'bx;
      end
      else begin
        holdData_i_W2 <= rawData_i_W2;
      end
    end

  always @(rawData_i_W2 or rdEnb)
    begin : stimuli_Data_Type_Conversion2_out1_1
      if (rdEnb == 1'b0) begin
        i_W2_offset <= holdData_i_W2;
      end
      else begin
        i_W2_offset <= rawData_i_W2;
      end
    end

  assign #2 i_W2 = i_W2_offset;

  assign #1 Data_Type_Conversion1_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_W1
  initial
    begin : i_W1_fileread
      fp_i_W1 = $fopen("i_W1.dat", "r");
      status_i_W1 = $rewind(fp_i_W1);
    end

  always @(Data_Type_Conversion1_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_W1 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_W1 = $fscanf(fp_i_W1, "%h", rawData_i_W1);
      end
    end

  // holdData reg for Data_Type_Conversion1_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion1_out1
      if (!i_RST_N) begin
        holdData_i_W1 <= 8'bx;
      end
      else begin
        holdData_i_W1 <= rawData_i_W1;
      end
    end

  always @(rawData_i_W1 or rdEnb)
    begin : stimuli_Data_Type_Conversion1_out1_1
      if (rdEnb == 1'b0) begin
        i_W1_offset <= holdData_i_W1;
      end
      else begin
        i_W1_offset <= rawData_i_W1;
      end
    end

  assign #2 i_W1 = i_W1_offset;

  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 20'b11110100001001000000;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1000000
  always @(posedge i_CLK or negedge i_RST_N)
    begin : DataTypeConversion_process
      if (i_RST_N == 1'b0) begin
        Data_Type_Conversion_out1_addr <= 20'b00000000000000000000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 20'b11110100001001000000) begin
            Data_Type_Conversion_out1_addr <= 20'b00000000000000000000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 20'b00000000000000000001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion_out1_addr_delay_1 = Data_Type_Conversion_out1_addr;

  // Data source for i_W0
  initial
    begin : i_W0_fileread
      fp_i_W0 = $fopen("i_W0.dat", "r");
      status_i_W0 = $rewind(fp_i_W0);
    end

  always @(Data_Type_Conversion_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_W0 <= 8'bx;
      end
      else if (rdEnb == 1) begin
        status_i_W0 = $fscanf(fp_i_W0, "%h", rawData_i_W0);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : stimuli_Data_Type_Conversion_out1
      if (!i_RST_N) begin
        holdData_i_W0 <= 8'bx;
      end
      else begin
        holdData_i_W0 <= rawData_i_W0;
      end
    end

  always @(rawData_i_W0 or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (rdEnb == 1'b0) begin
        i_W0_offset <= holdData_i_W0;
      end
      else begin
        i_W0_offset <= rawData_i_W0;
      end
    end

  assign #2 i_W0 = i_W0_offset;

  assign snkDonen =  ~ check1_done;



  assign tb_enb = i_RST_N & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge i_CLK or negedge i_RST_N)
    begin : u_enable_delay
      if (!i_RST_N) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 i_CLK_EN = rdEnb;

  initial
    begin : i_RST_N_gen
      i_RST_N <= 1'b0;
      # (20);
      @ (posedge i_CLK)
      # (2);
      i_RST_N <= 1'b1;
    end

  always 
    begin : i_CLK_gen
      i_CLK <= 1'b1;
      # (5);
      i_CLK <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        i_CLK <= 1'b1;
        # (5);
        i_CLK <= 1'b0;
        # (5);
        $stop;
      end
    end

  Subsystem u_Subsystem (.i_CLK(i_CLK),
                         .i_RST_N(i_RST_N),
                         .i_CLK_EN(i_CLK_EN),
                         .i_W0(i_W0),  // int8
                         .i_W1(i_W1),  // int8
                         .i_W2(i_W2),  // int8
                         .i_W3(i_W3),  // int8
                         .i_X0(i_X0),  // int8
                         .i_X1(i_X1),  // int8
                         .i_X2(i_X2),  // int8
                         .i_X3(i_X3),  // int8
                         .ce_out(ce_out),
                         .Out1(Out1)  // int16
                         );

  assign Out1_enb = ce_out & Out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1000000
  always @(posedge i_CLK or negedge i_RST_N)
    begin : c_2_process
      if (i_RST_N == 1'b0) begin
        Out1_addr <= 20'b00000000000000000000;
      end
      else begin
        if (Out1_enb) begin
          if (Out1_addr >= 20'b11110100001001000000) begin
            Out1_addr <= 20'b00000000000000000000;
          end
          else begin
            Out1_addr <= Out1_addr + 20'b00000000000000000001;
          end
        end
      end
    end



  assign Out1_lastAddr = Out1_addr >= 20'b11110100001001000000;



  assign Out1_done = Out1_lastAddr & i_RST_N;



  // Delay to allow last sim cycle to complete
  always @(posedge i_CLK or negedge i_RST_N)
    begin : checkDone_1
      if (!i_RST_N) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_done_enb) begin
          check1_done <= Out1_done;
        end
      end
    end

  assign #1 Out1_addr_delay_1 = Out1_addr;

  // Data source for Out1_expected
  initial
    begin : Out1_expected_fileread
      fp_Out1_expected = $fopen("Out1_expected.dat", "r");
      status_Out1_expected = $rewind(fp_Out1_expected);
    end

  always @(Out1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_expected <= 16'bx;
      end
      else if (ce_out == 1) begin
        status_Out1_expected = $fscanf(fp_Out1_expected, "%h", Out1_expected);
      end
    end

  assign Out1_ref = Out1_expected;

  always @(posedge i_CLK or negedge i_RST_N)
    begin : Out1_checker
      if (i_RST_N == 1'b0) begin
        Out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out1 !== Out1_ref) begin
          Out1_testFailure <= 1'b1;
          $display("ERROR in Out1 at time %t : Expected '%h' Actual '%h'", $time, Out1_ref, Out1);
        end
      end
    end

  assign testFailure = Out1_testFailure;

  always @(posedge i_CLK)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Subsystem_tb

